// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequence.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IncrementNumber struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncrementNumber) Reset()         { *m = IncrementNumber{} }
func (m *IncrementNumber) String() string { return proto.CompactTextString(m) }
func (*IncrementNumber) ProtoMessage()    {}
func (*IncrementNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{0}
}

func (m *IncrementNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementNumber.Unmarshal(m, b)
}
func (m *IncrementNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementNumber.Marshal(b, m, deterministic)
}
func (m *IncrementNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementNumber.Merge(m, src)
}
func (m *IncrementNumber) XXX_Size() int {
	return xxx_messageInfo_IncrementNumber.Size(m)
}
func (m *IncrementNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementNumber.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementNumber proto.InternalMessageInfo

func (m *IncrementNumber) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IncrementNumber) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FibonacciNumber struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibonacciNumber) Reset()         { *m = FibonacciNumber{} }
func (m *FibonacciNumber) String() string { return proto.CompactTextString(m) }
func (*FibonacciNumber) ProtoMessage()    {}
func (*FibonacciNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{1}
}

func (m *FibonacciNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibonacciNumber.Unmarshal(m, b)
}
func (m *FibonacciNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibonacciNumber.Marshal(b, m, deterministic)
}
func (m *FibonacciNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibonacciNumber.Merge(m, src)
}
func (m *FibonacciNumber) XXX_Size() int {
	return xxx_messageInfo_FibonacciNumber.Size(m)
}
func (m *FibonacciNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_FibonacciNumber.DiscardUnknown(m)
}

var xxx_messageInfo_FibonacciNumber proto.InternalMessageInfo

func (m *FibonacciNumber) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FibonacciNumber) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type UniqueString struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniqueString) Reset()         { *m = UniqueString{} }
func (m *UniqueString) String() string { return proto.CompactTextString(m) }
func (*UniqueString) ProtoMessage()    {}
func (*UniqueString) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{2}
}

func (m *UniqueString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniqueString.Unmarshal(m, b)
}
func (m *UniqueString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniqueString.Marshal(b, m, deterministic)
}
func (m *UniqueString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueString.Merge(m, src)
}
func (m *UniqueString) XXX_Size() int {
	return xxx_messageInfo_UniqueString.Size(m)
}
func (m *UniqueString) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueString.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueString proto.InternalMessageInfo

func (m *UniqueString) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UniqueString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*IncrementNumber)(nil), "protobuf.IncrementNumber")
	proto.RegisterType((*FibonacciNumber)(nil), "protobuf.FibonacciNumber")
	proto.RegisterType((*UniqueString)(nil), "protobuf.UniqueString")
}

func init() { proto.RegisterFile("sequence.proto", fileDescriptor_e97b888ecada2421) }

var fileDescriptor_e97b888ecada2421 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5,
	0x69, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79,
	0x79, 0xf9, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0x75, 0x52, 0xd2, 0x50, 0x59, 0x98,
	0x72, 0xfd, 0xd4, 0xdc, 0x82, 0x92, 0x4a, 0x88, 0xa4, 0x92, 0x39, 0x17, 0xbf, 0x67, 0x5e, 0x72,
	0x51, 0x6a, 0x6e, 0x6a, 0x5e, 0x89, 0x5f, 0x69, 0x6e, 0x52, 0x6a, 0x91, 0x10, 0x1f, 0x17, 0x53,
	0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x08, 0x17, 0x6b,
	0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x13, 0x58, 0x08, 0xc2, 0x01, 0x69, 0x74, 0xcb, 0x4c, 0xca,
	0xcf, 0x4b, 0x4c, 0x4e, 0xce, 0xc4, 0xd0, 0xc8, 0x8a, 0x47, 0xa3, 0x09, 0x17, 0x4f, 0x68, 0x5e,
	0x66, 0x61, 0x69, 0x6a, 0x70, 0x49, 0x51, 0x66, 0x5e, 0x3a, 0x7e, 0xeb, 0x38, 0xa1, 0xba, 0x8c,
	0xb6, 0x31, 0x71, 0x71, 0x04, 0x43, 0xfd, 0x2f, 0x94, 0xca, 0xc5, 0x09, 0x77, 0xb4, 0x90, 0x98,
	0x1e, 0xc4, 0x7f, 0x7a, 0x30, 0xff, 0xe9, 0xb9, 0x82, 0xfc, 0x27, 0x25, 0x89, 0x10, 0x40, 0xf3,
	0xa1, 0x92, 0x6a, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0xe4, 0x95, 0xa4, 0xc0, 0x21, 0x56, 0x66, 0xa8,
	0x0f, 0x0b, 0x59, 0xfd, 0x4c, 0x98, 0x4a, 0x2b, 0x46, 0x2d, 0x90, 0x35, 0x70, 0x2f, 0x12, 0x63,
	0x0d, 0x5a, 0x78, 0xe0, 0xb1, 0x26, 0x0d, 0xa6, 0x12, 0x64, 0x4d, 0x0c, 0x17, 0x1b, 0x24, 0x40,
	0x70, 0xda, 0x21, 0x86, 0x10, 0x40, 0x0e, 0x3a, 0x25, 0x25, 0xb0, 0x05, 0x32, 0x4a, 0xe2, 0x18,
	0x16, 0x94, 0x82, 0x95, 0x59, 0x31, 0x6a, 0x25, 0xb1, 0x81, 0xb5, 0x1a, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0xe2, 0xa2, 0x77, 0x3e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequenceClient is the client API for Sequence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceClient interface {
	Increment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IncrementNumber, error)
	Fibonacci(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FibonacciNumber, error)
	Unique(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UniqueString, error)
}

type sequenceClient struct {
	cc *grpc.ClientConn
}

func NewSequenceClient(cc *grpc.ClientConn) SequenceClient {
	return &sequenceClient{cc}
}

func (c *sequenceClient) Increment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IncrementNumber, error) {
	out := new(IncrementNumber)
	err := c.cc.Invoke(ctx, "/protobuf.Sequence/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceClient) Fibonacci(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FibonacciNumber, error) {
	out := new(FibonacciNumber)
	err := c.cc.Invoke(ctx, "/protobuf.Sequence/Fibonacci", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceClient) Unique(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UniqueString, error) {
	out := new(UniqueString)
	err := c.cc.Invoke(ctx, "/protobuf.Sequence/Unique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServer is the server API for Sequence service.
type SequenceServer interface {
	Increment(context.Context, *empty.Empty) (*IncrementNumber, error)
	Fibonacci(context.Context, *empty.Empty) (*FibonacciNumber, error)
	Unique(context.Context, *empty.Empty) (*UniqueString, error)
}

func RegisterSequenceServer(s *grpc.Server, srv SequenceServer) {
	s.RegisterService(&_Sequence_serviceDesc, srv)
}

func _Sequence_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Sequence/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).Increment(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sequence_Fibonacci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).Fibonacci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Sequence/Fibonacci",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).Fibonacci(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sequence_Unique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).Unique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Sequence/Unique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).Unique(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sequence_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Sequence",
	HandlerType: (*SequenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _Sequence_Increment_Handler,
		},
		{
			MethodName: "Fibonacci",
			Handler:    _Sequence_Fibonacci_Handler,
		},
		{
			MethodName: "Unique",
			Handler:    _Sequence_Unique_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequence.proto",
}
