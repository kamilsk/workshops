# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import sequence_pb2 as sequence__pb2


class SequenceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Increment = channel.unary_unary(
        '/protobuf.Sequence/Increment',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=sequence__pb2.IncrementNumber.FromString,
        )
    self.Fibonacci = channel.unary_unary(
        '/protobuf.Sequence/Fibonacci',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=sequence__pb2.FibonacciNumber.FromString,
        )
    self.Unique = channel.unary_unary(
        '/protobuf.Sequence/Unique',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=sequence__pb2.UniqueString.FromString,
        )


class SequenceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Increment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Fibonacci(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unique(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SequenceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Increment': grpc.unary_unary_rpc_method_handler(
          servicer.Increment,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=sequence__pb2.IncrementNumber.SerializeToString,
      ),
      'Fibonacci': grpc.unary_unary_rpc_method_handler(
          servicer.Fibonacci,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=sequence__pb2.FibonacciNumber.SerializeToString,
      ),
      'Unique': grpc.unary_unary_rpc_method_handler(
          servicer.Unique,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=sequence__pb2.UniqueString.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protobuf.Sequence', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
